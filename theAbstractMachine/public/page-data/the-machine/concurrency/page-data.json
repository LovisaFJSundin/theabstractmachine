{
    "componentChunkName": "component---src-templates-machine-template-js",
    "path": "/the-machine/concurrency",
    "result": {"data":{"mdx":{"frontmatter":{"category":"Operating Systems","slug":"concurrency","title":"Concurrency","subtitle":"The Illusion of Simultaneity","tags":["context switch","multi-programming","scheduler"],"description":"Explore how the ..."},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Concurrency\",\n  \"subtitle\": \"The Illusion of Simultaneity\",\n  \"slug\": \"concurrency\",\n  \"date\": \"2021-11-07T00:00:00.000Z\",\n  \"author\": \"Lovisa Sundin\",\n  \"category\": \"Operating Systems\",\n  \"tags\": [\"context switch\", \"multi-programming\", \"scheduler\"],\n  \"description\": \"Explore how the ...\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SlideDeck, {\n    title: \"Concurrency\",\n    mdxType: \"SlideDeck\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"concurrency"}},
    "staticQueryHashes": []}